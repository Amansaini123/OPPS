// Reference Vairable


int a=10;
int & b=a


// Now b is the alterantive name for a i.e both a and b are pointing to the same location
// Refernce variable can not be NULL this is how it is differenent from pointer
// Moreover we can make array of pointer but not here





// Function overloading 
// It means function can be of the same name in the program but the number of arguments in the function or the type of argument must be diiferent 
// i.e we cant make exact same function





// Inline function in C++
// Function inside the class in already inline
// inline int max(int a,int b)
// reduce the calling overhead in the function  so if the function is small then use the inline function else length of binary excetable file increases
// inline is a request not a command hence may or maynot be accepted 



// Abstraction --> refers to the coffee making machine i.e we have functions but internal implementation is hided
// The man only knows that pressing the accelerators will increase the speed of car or applying brakes will
// stop the car but he does not know about how on pressing accelerator the speed is actually increasing, 
// We can implement Abstraction in C++ using classes. Class helps us to group data and member functions using available access specifiers.



//Access specifiers or access modifiers define how the members (attributes and methods) of a class can be accessed.
// To control the amount of access we can give of our class to the outside environmet

public - members are accessible from outside the class
private - members cannot be accessed (or viewed) from outside the class
protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes.

// By default the class is private  

In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them.
Consider a real life example of encapsulation, in a company there are different sections like the accounts section, finance section, sales section etc.




Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.



// Base class
class Animal {
  public:
    void animalSound() {
    cout << "The animal makes a sound \n" ;
  }
};


// Derived class
class Pig : public Animal {
  public:
    void animalSound() {
    cout << "The pig says: wee wee \n" ;
  }
};

// Derived class
class Dog : public Animal {
  public:
    void animalSound() {
    cout << "The dog says: bow wow \n" ;
  }
};




// Default Arguments
int add(int x,int y,int z=10,int m=20)

We can call this function by the following way
add(10,20)
add(10,20,30)
add(10,20,30,40)


// Constant argument
add(const int x){
  x=x+10
}
// Now this x will not change

add(const int x)
add(const int& x)
add(const int *p)

// all of the above 3 are valid examples
// like we want to fix the value of pi so we can use the const keyword



//A class is a prototype that consists of objects in different states and with different behaviors.
// We can call Class  without instantiating it  i.e without making the object of it if it has a static method or it is inherited by some other class

// Object is a physical entity class is a virtual entity (Object is a varibale of class)
// Multiple inheritance comes into picture when a class inherits more than one base class example class defining a child inherits from two base classes Mother and Father

// Hybrid inheritance is a combination of multiple and multi-level inheritance.

// Limitation of Inheritance 
// Increases the time and effort required to execute a program as it requires jumping back and forth between different classes and 
// The parent class and the child class get tightly coupled Moreover modifications to the program would require changes both in the parent as well as the child class


// A superclass or base class is a class that acts as a parent to some other class or classes. 

//The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message to be displayed in more than one form.
//A real-life example of polymorphism, a person at the same time can have different characteristics. Like a man at the same time is a father,
//a husband, an employee.

// Examples of Complie time ploymorphism is Function and Operator Overloading  and Run time polymorphism is Virtual function or Function overridding 


When the base class and derived class have member functions with exactly the same name, same return-type, and same arguments list,
then it is said to be function overriding. Prioirty is given to the child class


A virtual function is a member function which is declared within a base class and is re-defined(Overriden) by a derived class.
Virtual functions cannot be static and also cannot be a friend function of another class.
The prototype of virtual functions should be same in base as well as derived class.


// A friend class can access private and protected members of other class in which it is declared as friend. 
//It is sometimes useful to allow a particular class to access private members of other class.


class Node { 
private: 
	int key; 
	Node* next; 
	/* Other members of Node Class */

	// Now class LinkedList can 
	// access private members of Node 
	friend class LinkedList; 
}; 




Two or more methods having the same name but different parameters or signature is operater overloading which is resolved during the compile time 
Child class redefining methods present in the base class with the same parameters/ signature and resolved during Run time

Public can be accesed from anywhere i.e from outside world ,derived class ,own class , protected is only accesed by derived class and own class and private 
only by the own class



An abstract class is a class that consists of abstract methods. These methods are basically declared but not defined. 
If these methods are to be used in some subclass, they need to be exclusively defined in the subclass.
Instances of an abstract class cannot be created because it does not have a complete implementation. 
However, instances of subclass inheriting the abstract class can be created.

Virtual functions are functions that are present in the parent class and are overridden by the subclass.
Pure virtual functions or abstract functions are functions that are only declared in the base class.
This means that they do not contain any definition in the base class and need to be redefined in the subclass.


A real-life example of polymorphism, a person at the same time can have different characteristics. Like a man at the same time is a father, a husband,
an employee. So the same person posses different behavior in different situations. This is called polymorphism. 

Runtime polymorphism: This type of polymorphism is achieved by Function Overriding.
Function overriding on the other hand occurs when a derived class has a definition for one of the member functions of the base class. 
That base function is said to be overridden.




A virtual function is a member function which is declared within a base class and is re-defined(Overriden) by a derived class





