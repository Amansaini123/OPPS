// Destructor --> Use to free the memory of object ,previosuly given by constructor
// Destructor is a member function which destructs or deletes an object.
A destructor function is called automatically when the object goes out of scope:
(1) the function ends
(2) the program ends
(3) a block containing local variables ends
(4) a delete operator is called 


Destructors have same name as the class preceded by a tilde (~)
Destructors don’t take any argument and don’t return anything

// Deallocation may fail in the case of multiple inheritance
//  No return type 
//  Same as the class name
//  No arguments

There can only one destructor in a class with classname preceded by ~, no parameters and no return type.
If we do not write our own destructor in class, compiler creates a default destructor for us. 


#include<bits/stdc++.h>
using namespace std;

class test{
    static int cnt;
    public:
        test(){
            cnt++;
            cout<<cnt<<" Object created";
        }
        ~ test(){
            cout<<cnt<<" object destoryed";
            cnt--;
        }
};

int main()
{
    cout<<"Main Block"<<endl;
    test t1;
    {
        cout<<"block1"<<endl;
        test t2,t3;
        cout<<"exit from block 1"<<endl;
    }
    cout<<"Exit from Main"<<endl;
    
    
}


