// Operator Overloading
// We can only overload that operators in C++ , which were valid operators in c , so below operators cannot be overloaded

// i.e  . (class member access)
//      ::(Scope Resolution)
//      sizeof()
//      conditional operator
//      .*(Pointer to Member cannot be overloaded)


An abstract class is made of abstract methods.
The abstract methods are only declared, however, not implemented.
When a subclass needs to use the methods, it needs to implement those methods.


// When operator is overloaded with multiple jobs it is known as operator overloading
// It is a way to implement compile time Polymorphosim
// Any symbol can be overloaded if it a valid symbol in C and is preceded by keyword operator



returntype  classname ::  operator symbolname (argument List)
// No argument for unary Operator , one argument for Binary operator

test operator -()       // unary
test operator +(test)   // Binary

But not with the case of friend function as friend function is not a member of any class

friend test operator -() // Unary
friend test operator +(test,test) // Binary


// Operator functions are same as normal functions. The only differences are,
//name of an operator function is always operator keyword followed by symbol of operator and operator functions are called when the corresponding operator is used.






// Unary Operator Overloading 

#include<bits/stdc++.h>
using namespace std;


class test{
    int a,b,c;
    public:
        void getdata(int x,int y,int z){
            a=x;
            b=y;
            c=z;
        }
        void operator - ();
        void disp(){
            cout<<a<<", "<<b<<", "<<c<<endl;
        }
};
void test::operator - (){
    a=-a;
    b=-b;
    c=-c;
}

int main()
{
    test obj;
    obj.getdata(-10,-20,-30);
    obj.disp();
    
    -obj;// calling
    obj.disp();


    
}


// OBJECTS
Basic Run time entity 
Takes space in memory and have associated address i.e we can say varibale of type class



Binary operator Overloading
#include<iostream> 
using namespace std; 

class Complex { 
private: 
	int real, imag; 
public: 
	Complex(int r = 0, int i =0) {real = r; imag = i;} 
	
	// This is automatically called when '+' is used with 
	// between two Complex objects 
	Complex operator + (Complex const &obj) { 
		Complex res; 
		res.real = real + obj.real; 
		res.imag = imag + obj.imag; 
		return res; 
	} 
	void print() { cout << real << " + i" << imag << endl; } 
}; 

int main() 
{ 
	Complex c1(10, 5), c2(2, 4); 
	Complex c3 = c1 + c2; // An example call to "operator+" 
	c3.print(); 
} 

Sometimes implementation of all function cannot be provided in a base class because we donâ€™t know the implementation. Such a class is called abstract class.
For example, let Shape be a base class. We cannot provide implementation of function draw() in Shape,
but we know every derived class must have implementation of draw(). 

// Virtual Function
A virtual function is a member function which is declared within a base class and is re-defined(Overriden) by a derived class.
Virtual functions cannot be static and also cannot be a friend function of another class.
The prototype of virtual functions should be same in base as well as derived class.



// Protected access modifier is similar to that of private access modifiers
// i.e accesability is same as that of private (i.e class functions or friend functions and  can also be used by derived class)
// this derived class thing is the only difference i.e protected is used in inheritance


#include<bits/stdc++.h>
using namespace std;

class parent{
    protected:
        int x;
};

class child: public parent{
    public:
        void set(int y){
            // i.e we are able to access the parent class members inside the base class
            x=y;
        }
        void display(){
            cout<<"The protected id is "<<x<<endl;
        }
};


int main()
{
    child obj;
    obj.set(5);
    obj.display();
}




