// Reference Vairable

int a=10;
int & b=a

// Now b is the alterantive name for a i.e both a and b are pointing to the same location
// Refernce variable can not be NULL this is how it is differenent from pointer
// Moreover we can make array of pointer but not here





// Function overloading 
// It means function can be of the same name in the program but the number of arguments in the function or the type of argument must be diiferent 
// i.e we cant make exact same function




// Inline function in C++
// Function inside the class in already inline
// inline int max(int a,int b)
// reduce the calling overhead in the function  so if the function is small then use the inline function else length of binary excetable file increases
// inline is a request not a command hence may or maynot be accepted 




// Abstraction --> refers to the coffee making machine i.e we have functions but internal implementation is hided
// The man only knows that pressing the accelerators will increase the speed of car or applying brakes will
// stop the car but he does not know about how on pressing accelerator the speed is actually increasing, 

// We can implement Abstraction in C++ using classes. Class helps us to group data members and member functions using available access specifiers.

//Access specifiers define how the members (attributes and methods) of a class can be accessed.
public - members are accessible from outside the class
private - members cannot be accessed (or viewed) from outside the class
protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes.




In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming,
Encapsulation is defined as binding together the data and the functions that manipulates them.
Consider a real life example of encapsulation, in a company there are different sections like the accounts section, finance section, sales section etc.




Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
// Base class
class Animal {
  public:
    void animalSound() {
    cout << "The animal makes a sound \n" ;
  }
};

// Derived class
class Pig : public Animal {
  public:
    void animalSound() {
    cout << "The pig says: wee wee \n" ;
  }
};

// Derived class
class Dog : public Animal {
  public:
    void animalSound() {
    cout << "The dog says: bow wow \n" ;
  }
};

//36


